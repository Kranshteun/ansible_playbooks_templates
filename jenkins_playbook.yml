--- # Modify to satisfy current configurations 
- name: Jenkins Master Play
  hosts: jenkins-handlers
  vars:
    my_jenkins_plugins:
	  token-macro:
	    enabled: yes
	  build-pipeline-plugin:
	    version: "1.4.9"
		pinned: no
		enabled: yes
   tasks:
     - name: Install plugins witout specific version
	   jenkins_plugin:
	     name: "{{ item.key }}"
	   register: my_jenkins_plugin_unrevisioned
	   when: >
	     'version' not in item.value
	   with_dict: "{{my_jenkins_plugins }}"
	   
	 - name: Install plugins with a specific version
	   jenkins_plugin:
	     name: "{{ item.key }}"
		 version: "{{ item.value['version'] }}"
	   register: my_jenkins_plugin_revisioned
	   when: >
	     'version' in item.value
	   with_dict: "{{ my_jenkins_plugins }}"
	   
	  - name: Initiate the fact
	    set_fact:
		   jenkins_restart_required: no
		   
	  - name: Check if restart required by any of the versioned plugins
	    set_fact:
		  jenkins_restart_required: yes
		when: item.changed
		with_items: "{{ my_jenkins_plugin_versioned.results }}"
		
	  - name: Rstart Jenkins if required
	    services: 
		  name: jenkins
		  state: restarted
		when: jenkins_restart_required
		
	  - name: Wait for Jenkins to start up
        uri:
          url: http://localhost:8080
          status_code: 200
          timeout: 5
        register: jenkins_service_status
        # Keep trying for 5 mins in 5 sec intervals
        retries: 60
        delay: 5
        until: >
           'status' in jenkins_service_status and
            jenkins_service_status['status'] == 200
        when: jenkins_restart_required

      - name: Reset the fact
        set_fact:
          jenkins_restart_required: no
        when: jenkins_restart_required

      - name: Plugin pinning
      jenkins_plugin:
        name: "{{ item.key }}"
        state: "{{ 'pinned' if item.value['pinned'] else 'unpinned'}}"
      when: >
        'pinned' in item.value
      with_dict: "{{ my_jenkins_plugins }}"

    - name: Plugin enabling
      jenkins_plugin:
        name: "{{ item.key }}"
        state: "{{ 'enabled' if item.value['enabled'] else 'disabled'}}"
      when: >
        'enabled' in item.value
      with_dict: "{{ my_jenkins_plugins }}" 
